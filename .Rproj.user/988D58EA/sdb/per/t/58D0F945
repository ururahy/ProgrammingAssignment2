{
    "contents" : "## These functions cache matrix and its inverse in an alternate environment\n\n## makeCacheMatrix initializes an object that stores the matrix and its inverse\n##   in a cached environment\n## It takes a square matrix x as argument\n## It returns with the lsit of methods implemented by the function\n## 1 - set - sets the square matrix in the cached environment\n## 2 - get - gets the square matrix from the cached environment\n## 3 - setinverse - sets the inverse in the cached environment\n## 4 - get inverse - gets the inverse from the cached environment\n\nmakeCacheMatrix <- function(x = matrix()) {\n    inv <- NULL\n    set <- function(y){\n        x <<- y\n        inv <<- NULL\n    }\n    get <- function() x\n    setinverse <- function(inverse) inv <<- inverse\n    getinverse <- function() inv\n    list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)\n}\n\n\n## cacheSolve computes the inverse of the square matrix stored in the cached \n##   environment\n## It takes the list generated by makeCacheMatrix caching of the original square\n##   matrix\n## Returns the inverse of the square matrix\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n    inv <- x$getinverse()\n    if (!is.null(inv)) {\n        message(\"getting cached data\")\n        return (inv)\n    }\n    data <- x$get()\n    inv <- solve(data, ...)\n    x$setinverse(inv)\n    inv\n}\n",
    "created" : 1437906561280.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1004233835",
    "id" : "58D0F945",
    "lastKnownWriteTime" : 1437911582,
    "path" : "~/Coursera/DataScienceTrack/2R/Homework/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}